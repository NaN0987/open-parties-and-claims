plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT' apply(false)
    id 'net.minecraftforge.gradle' version '[6.0,6.2)' apply(false)
    id 'org.spongepowered.gradle.vanilla' version '0.2.1-SNAPSHOT' apply(false)
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT' apply(false)
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'maven-publish'

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    //java.withSourcesJar()
    //java.withJavadocJar()

    jar {
        manifest {
            attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestampe'              : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Build-On-Minecraft'      : minecraft_version
            ])
        }
    }

    repositories {

        mavenCentral()

        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        maven {
            name = 'BlameJared Maven (CrT / Bookshelf)'
            url = 'https://maven.blamejared.com'
        }
        maven {
            url = "https://cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
        maven {
            name = "Modrinth"
            url = "https://api.modrinth.com/maven"
        }
        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots"
        }
        maven {
            name = "Fuzs Mod Resources"
            url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
        }
    }

    tasks.withType(JavaCompile).configureEach {

        it.options.encoding = 'UTF-8'
        it.options.release = 17
    }

     processResources {
        def expandProps = [
                "version": version,
                "group": project.group, //Else we target the task's group.
                "minecraft_version": minecraft_version,
                "forge_version": forge_version,
                "forge_loader_version_range": forge_loader_version_range,
                "forge_version_range": forge_version_range,
                "minecraft_version_range": minecraft_version_range,
                "forge_minecraft_version_range": forge_minecraft_version_range,
                "fabric_version": fabric_version,
                "fabric_loader_version": fabric_loader_version,
                "fabric_loader_version_range": fabric_loader_version_range,
                "mod_name": mod_name,
                "mod_display_name": mod_display_name,
                "mod_author": mod_author,
                "mod_id": mod_id,
                "license": license,
                "description": project.description,
                "neoforge_version": neoforge_version,
                "neoforge_loader_version_range": neoforge_loader_version_range,
                "forgeconfigapiport_fabric_range": forgeconfigapiport_fabric_range,
                "fabric_api_range": fabric_api_range,
                "create_forge_range": create_forge_range,
                "java_fabric_range": java_fabric_range,
                "homepage": homepage,
                "sources": sources,
                "issues": issues
        ]

        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', '*.mixins.json']) {
            expand expandProps
        }
        inputs.properties(expandProps)
    }

    javadoc {
        options.encoding = 'UTF-8'
    }


    File assetsLangFolder = project(":Common").sourceSets.main.resources.srcDirs[0].toPath().resolve("assets/${mod_id}/lang").toFile()
    File dataLangFolder = new File("data/${mod_id}/lang")

    tasks.withType(Jar).configureEach {
        from(rootDir){
            include 'LICENSE'
        }
    }

    tasks.withType(ProcessResources).configureEach {
        from(assetsLangFolder) {
            into(dataLangFolder)//copying lang files from client resources to server data
        }
    }

    project.task('packageSources', type: Jar) {
        archiveClassifier = 'sources'
        from project(":Common").sourceSets.main.allSource
        from project.sourceSets.main.allSource
        from(assetsLangFolder) {
            into(dataLangFolder)//copying lang files from client resources to server data
        }
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata) {

        enabled = false
    }

    compileTestJava {
        enabled = false
    }
}